{"version":3,"sources":["redux/selectors.js","components/chart/chart.jsx","tools/toasts.js","tools/axios.js","components/chart/chart-container.jsx","redux/actions.js","redux/constants.js","components/header/header.jsx","components/widget/widget.jsx","components/widget/widget-container.jsx","components/app/app.js","serviceWorker.js","tools/tools.js","redux/reducer.js","index.js"],"names":["getStartDateSelector","state","startDate","getEndDateSelector","endDate","getActiveCurrencySelector","activeCurrency","getCurrencyIDSelector","currencies","getExchangeRatesSelector","rates","memo","width","height","data","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","errorToast","message","toast","error","position","POSITION","TOP_CENTER","autoClose","proxyAPI","require","default","create","baseURL","connect","currencyID","getExchangeRates","dispatch","a","info","get","then","res","catch","e","console","exchangeRates","useEffect","className","Header","RangePicker","DatePicker","Widget","onCurrencyChange","onDateChange","defaultValue","onChange","Option","value","moment","setDate","moments","dates","map","format","slice","setActiveCurrency","currency","App","limit","Boolean","window","location","hostname","match","getConvertedDate","date","toISOString","init","USD","EUR","RUB","Date","reducer","produce","draft","action","convertedRated","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5dacb846.chunk.js","sourcesContent":["export const getStartDateSelector = state => state.startDate;\r\nexport const getEndDateSelector = state => state.endDate;\r\nexport const getActiveCurrencySelector = state => state.activeCurrency;\r\nexport const getCurrencyIDSelector = state => state.currencies[state.activeCurrency];\r\nexport const getExchangeRatesSelector = state => state.rates;","import React, { memo } from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n} from \"recharts\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport \"./chart.scss\";\r\n\r\nconst Chart = ({ rates }) => {\r\n  return (\r\n    <LineChart\r\n      width={700}\r\n      height={400}\r\n      data={rates}\r\n      margin={{\r\n        top: 5,\r\n        right: 30,\r\n        left: 20,\r\n        bottom: 5,\r\n      }}\r\n    >\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"Date\" />\r\n      <YAxis dataKey=\"Cur_OfficialRate\" type=\"category\" />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Line type=\"monotone\" dataKey=\"Cur_OfficialRate\" stroke=\"#82ca9d\" />\r\n    </LineChart>\r\n  );\r\n};\r\n\r\nChart.propTypes = {\r\n  rates: PropTypes.arrayOf(PropTypes.exact({\r\n    Date: PropTypes.string.isRequired,\r\n    Cur_OfficialRate: PropTypes.number.isRequired,\r\n    Cur_ID: PropTypes.number.isRequired\r\n  }))\r\n}\r\n\r\nexport default memo(Chart);\r\n","import { toast } from 'react-toastify';\r\n\r\n export const errorToast = message => toast.error(message, { \r\n   position: toast.POSITION.TOP_CENTER,\r\n   autoClose: 5000\r\n });\r\n\r\n export const infoToast = message => toast.info(message, { \r\n  position: toast.POSITION.TOP_CENTER,\r\n  autoClose: 3000\r\n});","const { default: Axios } = require(\"axios\");\r\n\r\nexport const proxyAPI = Axios.create({ baseURL: \"https://us-central1-currency-checker-server.cloudfunctions.net/app\"});","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getCurrencyIDSelector, getEndDateSelector, getStartDateSelector, getExchangeRatesSelector } from '../../redux/selectors'\r\nimport Chart from './chart'\r\nimport { getExchangeRates } from \"../../redux/actions\"\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ChartContainer = ({ startDate, endDate, currencyID, rates, getExchangeRates }) => {\r\n  useEffect(() => {\r\n    getExchangeRates(startDate, endDate, currencyID);\r\n  }, [startDate, endDate, currencyID])\r\n  if(rates === null) return <div className=\"loading h2\">Loading...</div>\r\n  return <Chart rates={rates} />\r\n}\r\n\r\nChartContainer.propTypes = {\r\n  startDate: PropTypes.string.isRequired,\r\n  endDate: PropTypes.string.isRequired,\r\n  currencyID: PropTypes.number.isRequired,\r\n  rates: PropTypes.oneOfType([null, PropTypes.array]),\r\n  getExchangeRates: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapState = state => ({\r\n  startDate: getStartDateSelector(state),\r\n  endDate: getEndDateSelector(state),\r\n  currencyID: getCurrencyIDSelector(state),\r\n  rates: getExchangeRatesSelector(state)\r\n})\r\n\r\nexport default connect(mapState, { getExchangeRates })(ChartContainer);","import { errorToast, infoToast } from \"../tools/toasts\";\r\nimport { proxyAPI } from \"../tools/axios\";\r\nimport { SET_EXCHANGE_RATES, SET_ACTIVE_CURRENCY, SET_DATE } from \"./constants\";\r\n\r\nexport const setActiveCurrency = currency => ({\r\n  type: SET_ACTIVE_CURRENCY,\r\n  currency\r\n});\r\n\r\nexport const setDate = (moments) => {\r\n  try {\r\n    const dates = moments.map(e => e.format().slice(0, 10));\r\n    return {\r\n      type: SET_DATE,\r\n      startDate: dates[0],\r\n      endDate: dates[1]\r\n    };\r\n  } catch {\r\n    errorToast(\"Incorrect date\")\r\n  }\r\n};\r\n\r\nexport const getExchangeRates = (startDate, endDate, currencyID) => async (dispatch) => {\r\n  try {\r\n    infoToast(\"Loading...\");\r\n    const exchangeRates = await proxyAPI\r\n    .get(`/exchange?startDate=${startDate}&endDate=${endDate}&currencyID=${currencyID}`)\r\n    .then((res) => res.data)\r\n    .catch((e) => console.error(e.message));\r\n  dispatch({\r\n    type: SET_EXCHANGE_RATES,\r\n    rates: exchangeRates\r\n  })\r\n  } catch (e) {\r\n    errorToast(\"Error receiving data\")\r\n  }\r\n};\r\n","export const SET_ACTIVE_CURRENCY = \"SET_ACTIVE_CURRENCY\";\r\nexport const SET_DATE = \"SET_DATE\";\r\nexport const SET_EXCHANGE_RATES = \"SET_EXCHANGE_RATES\"; ","import React from \"react\";\r\n\r\nimport \"./header.scss\";\r\n\r\nconst Header = () => (\r\n  <header className=\"header\">\r\n    <h1 className=\"h4\">Currency checker</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { DatePicker, Select } from \"antd\";\r\nimport moment from \"moment\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport \"./widget.scss\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst { RangePicker } = DatePicker;\r\n\r\nconst Widget = ({\r\n  startDate,\r\n  endDate,\r\n  activeCurrency,\r\n  onCurrencyChange,\r\n  onDateChange,\r\n}) => {\r\n  return (\r\n    <div className=\"widget\">\r\n      <Select defaultValue={activeCurrency} onChange={onCurrencyChange}>\r\n        <Select.Option value=\"USD\">USD</Select.Option>\r\n        <Select.Option value=\"EUR\">EUR</Select.Option>\r\n        <Select.Option value=\"RUB\">RUB</Select.Option>\r\n      </Select>\r\n      <RangePicker\r\n        defaultValue={[moment(startDate), moment(endDate)]}\r\n        onChange={onDateChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nWidget.propTypes = {\r\n  onDateChange: PropTypes.func.isRequired,\r\n  onCurrencyChange: PropTypes.func.isRequired,\r\n  startDate: PropTypes.string.isRequired,\r\n  endDate: PropTypes.string.isRequired,\r\n  activeCurrency: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Widget;\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setDate, setActiveCurrency } from \"../../redux/actions\";\r\nimport {\r\n  getEndDateSelector,\r\n  getStartDateSelector,\r\n  getActiveCurrencySelector,\r\n} from \"../../redux/selectors\";\r\nimport Widget from \"./widget\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst WidgetContainer = ({\r\n  setDate,\r\n  setActiveCurrency,\r\n  startDate,\r\n  endDate,\r\n  activeCurrency,\r\n}) => {\r\n  useEffect(() => {}, []);\r\n  return (\r\n    <Widget\r\n      startDate={startDate}\r\n      endDate={endDate}\r\n      activeCurrency={activeCurrency}\r\n      onDateChange={setDate}\r\n      onCurrencyChange={setActiveCurrency}\r\n    />\r\n  );\r\n};\r\n\r\nWidgetContainer.propTypes = {\r\n  setDate: PropTypes.func.isRequired,\r\n  setActiveCurrency: PropTypes.func.isRequired,\r\n  startDate: PropTypes.string.isRequired,\r\n  endDate: PropTypes.string.isRequired,\r\n  activeCurrency: PropTypes.string.isRequired\r\n}\r\n\r\nconst mapState = (state) => ({\r\n  startDate: getStartDateSelector(state),\r\n  endDate: getEndDateSelector(state),\r\n  activeCurrency: getActiveCurrencySelector(state),\r\n});\r\n\r\nexport default connect(mapState, { setDate, setActiveCurrency })(\r\n  WidgetContainer\r\n);\r\n","import React from \"react\";\nimport ChartContainer from \"../chart/chart-container\";\nimport Header from \"../header/header\";\nimport { ToastContainer } from \"react-toastify\";\nimport WidgetContainer from \"../widget/widget-container\";\n\nimport \"./app.scss\";\nimport \"../../scss/general.scss\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n      <ChartContainer />\n      <WidgetContainer />\n      <ToastContainer limit={3} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const getConvertedDate = (date) => date.toISOString().slice(0,10);\r\nexport const convertRatesDate = rates => rates.map(e => ({ ...e, Date: e.Date.slice(0, 10)}))","import produce from \"immer\";\r\nimport { convertRatesDate, getConvertedDate } from \"../tools/tools\";\r\nimport { SET_ACTIVE_CURRENCY, SET_DATE, SET_EXCHANGE_RATES } from \"./constants\";\r\n\r\nconst init = {\r\n  currencies: {\r\n    USD: 145,\r\n    EUR: 292,\r\n    RUB: 298,\r\n  },\r\n  activeCurrency: \"USD\",\r\n  startDate: getConvertedDate(new Date(\"2020-10-13\")),\r\n  endDate: getConvertedDate(new Date()),\r\n  rates: null\r\n};\r\n\r\nconst reducer = produce((draft, action) => {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_CURRENCY:\r\n      draft.activeCurrency = action.currency;\r\n      return draft;\r\n    case SET_DATE:\r\n      draft.startDate = action.startDate;\r\n      draft.endDate = action.endDate;\r\n      return draft;\r\n    case SET_EXCHANGE_RATES:\r\n      const convertedRated = convertRatesDate(action.rates);\r\n      draft.rates = convertedRated;\r\n      return draft;\r\n    default:\r\n      return draft;\r\n  }\r\n}, init);\r\n\r\nexport { reducer };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app/app\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { reducer } from \"./redux/reducer\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}